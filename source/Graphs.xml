<?xml version="1.0" encoding="utf-8"?>
<ModelImplementationPsi>


<Texts id="graphspsi_messages">
  <Language key="ES" name="Spanish">
    <Text key="SVG_DEFS_ERROR">Error cargando definiciones de SVG. Identificador '$1'</Text>
    <Text key="SVG_DEFS_NOT_DEFINE">No hay definición '$1' SVG</Text>
  </Language>
</Texts>


 
<Class id="defs" arguments="">
  <Validator element-key="defs" id="*identifier"/>
  <Static name="map">{}</Static>
  
  <Event name="onInit" arguments=""><![CDATA[
    // Obtener SVG de la definición 
    var svg = $(this._ref).children("svg").get(0);
    //Validar que la fuente no sea nula
    if (svg==null) 
      throw new PsiError("GRAPHSPSI.SVG_DEFS_ERROR", [this.id()], [this]);
    //Registrar definiciones SVG
    Defs.map[this.id()] = svg;
    $("defs", svg).children().each(function() {
      PsiData.defs[$(this).attr("id")] = $(this);
    });
  ]]></Event>
</Class>
 
  
  
<Class id="drag_point" arguments="parent, x, y, svggen, params, r" init="this._init(x, y, svggen, params, r)">
  <Property name="parent" default="parent"/>
  <Property name="circle" default="null"/>
  
  <Method name="_init" arguments="x, y, svggen, params, r"><![CDATA[
    // Obtener SVG del punto de movimiento 
    var data = $.extend({fill: '#DBFFCA', stroke: 'gray', strokeWidth: 1}, params);
    this.circle = svggen.circle(this.parent, x, y, r?r:4, data);
  ]]></Method>
  
  <Method name="bind" arguments="ref, method"><![CDATA[
    $(this.circle)
      .drag("start", function(event, dd) {
        //Establecer inicio de movimiento
        this._start = createPoint(this.ownerSVGElement, this.cx.baseVal.value, this.cy.baseVal.value);
        this._current = createPoint(this.ownerSVGElement, dd.deltaX, dd.deltaY);
      })
      .drag(function(event, dd) {
        this.move(event, dd);
      })
      .drag("end", function(event, dd) {
        this.move(event, dd);
      })
      .each(function(){
        this._ref = ref;
        this._method = method; 
        //Función para mover elemento gráfico Psi
        this.move = function(event, dd){
          this._current.set(dd.deltaX, dd.deltaY).plus(this._start);
          this.cx.baseVal.value = this._current.x;
          this.cy.baseVal.value = this._current.y;
          if (this._ref && this._method)
            this._ref[this._method](this._current.x, this._current.y);
        };
      });
  ]]></Method>
  
  <Method name="destroy" arguments=""><![CDATA[
    $(this.circle).remove();
  ]]></Method>
</Class>
  

  
<Class id="base" arguments="">
  <Event name="onInit" arguments=""><![CDATA[
    //Registrar elemento gráfico Psi
    PsiData[this.type][this.id()] = this;
    // Obtener SVG de la definición 
    this.svg = $(this._ref).children("svg").get(0);
  ]]></Event>
  
  <Method name="_initCreate" arguments="svgroot, graph, parent, ref" trycatch="false"><![CDATA[
    //Crear referencias
    graph._lib = this;
    $(graph).attr({"type": this.type});
    if(this.hasAttr("class"))
    	graph.setAttribute("class", this.attr("class"));
    
    //Adicionar definiciones  
    var sdefs = this.attr("defs");
    if (sdefs) {
      var defs = sdefs.split(",");
      for (var id in defs) {
        var def = PsiData.defs.get( defs[id] );
        if (def && $("defs", svgroot).find("#"+defs[id]).length==0) 
          $("defs", svgroot).append( def.clone(true) );
      }
    }  
    
    //Definir traslación del elemento gráfico Psi
    graph._translate = graph.ownerSVGElement.createSVGTransform();
    graph.transform.baseVal.appendItem(graph._translate);
    graph._translate.setTranslate(0, 0);
    
    //Definir escala del elemento gráfico Psi
    graph._scale = graph.ownerSVGElement.createSVGTransform();
    graph.transform.baseVal.appendItem(graph._scale);
    graph._scale.setScale(1, 1);
    
    //Definir escala del elemento gráfico Psi
    graph._rotate = graph.ownerSVGElement.createSVGTransform();
    graph.transform.baseVal.appendItem(graph._rotate);
    graph._rotate.setRotate(0,0,0); 
  ]]></Method>
  
  <Method name="_bindDrag" arguments="refsvg, ref"><![CDATA[
    var selector = this.attr("drag-selector");
    if (selector) {
      $(selector, refsvg)
        .drag("start", function(event, dd) {
          //Establecer inicio de movimiento
          this._start = createPoint(this.ownerSVGElement, this._ref._translate.matrix.e, this._ref._translate.matrix.f);
          this._current = createPoint(this.ownerSVGElement, dd.deltaX, dd.deltaY);
        })
        .drag(function(event, dd) {
          this.move(event, dd);
        })
        .drag("end", function(event, dd) {
          this.move(event, dd);
        })
        .each(function(){
          this._ref = refsvg; 
          //Función para mover elemento gráfico Psi
          this.move = function(event, dd){
            this._current.set(dd.deltaX, dd.deltaY).plus(this._start);
            this._ref._translate.setTranslate(this._current.x, this._current.y);
          };
        });
    }
  ]]></Method>
  
  <Method name="cloneSVG" arguments="" trycatch="false"><![CDATA[
    return $(this.svg).children().clone(true);
  ]]></Method>
</Class>
  
  
  
<Class id="shape" arguments="">
  <Validator element-key="shape" id="*identifier" drag-selector="*text"/>
  <Property name="type" default="GraphType.Shape"/>
  
  <Method name="create" arguments="svggen, id, parent, ref"><![CDATA[
    var shape = svggen.group(parent, id);
    
    //Iniciar elemento gráfico
    this._initCreate(svggen.root(), shape, parent, ref);
    svggen.add(shape, this.cloneSVG());
    
    //Enlazar eventos a la figura
    this._bindDrag(shape, ref);
    return shape;
  ]]></Method>
</Class>

  
  
<Class id="label_point" arguments="svggen, parent, point, ref" init="this._init()">
  <Property name="_ref" default="ref"/>
  <Property name="svggen" default="svggen"/>
  <Property name="point" default="point"/>
  <Property name="text" default="svggen.text(parent,0,0,'')"/>
  
  <Method name="_init" arguments="" trycatch="false"><![CDATA[
    this.refresh();
    $(this.text).attr("key", "label");
  ]]></Method>
  
  <Method name="refresh" arguments=""><![CDATA[
    this.source = {
          value: this._ref.attr("label"), 
          valuePos: this._ref.attr("label-pos"), 
          name: "label",
          namePos: "label-pos" 
        };
    //Procesar posición
    if (this.source.valuePos) {
      var ps = this.source.valuePos.split(" ");
      this.x = parseFloat(ps[0]);
      this.y = parseFloat(ps[1]);
      this.refreshPosition();
    }
    
    //Procesar contenido
    if (this.source.value) {
      var label = this.source.value;
      label = this._ref && this._ref.processValue ? this._ref.processValue(label) : label;
      $(this.text).text(label);
    }
  ]]></Method>
  
  <Method name="refreshPosition" arguments="newPoint" trycatch="false"><![CDATA[
    if (newPoint)
      this.point = newPoint;
    $(this.text).attr({
      x: this.point.x+this.x,
      y: this.point.y+this.y
    });
  ]]></Method>
  
  <Method name="modifyPosition" arguments="deltaX, deltaY" trycatch="false"><![CDATA[
    this.x += deltaX;
    this.y += deltaY;
    this._ref.attr(this.source.namePos, this.x.toString()+" "+this.y.toString());
  ]]></Method>
</Class>
  
  
<Class id="path" arguments="">
  <Validator element-key="path" id="*identifier" key-line="*identifier" drag-selector="text"/>
  <Property name="type" default="GraphType.Path"/>
  
  <Method name="create" arguments="svggen, id, parent, ref"><![CDATA[
    var svgroot = svggen.root(),
        gpath = svggen.group(parent, id);
    
    //Establecer translación, rotación y escala
    this._initCreate(svgroot, gpath, parent, ref);
    svggen.add(gpath, this.cloneSVG());
    gpath._line = $("[key="+this.attr("key-line")+"]", gpath).get(0);
    
    //Enlazar eventos a la figura
    this._bindDrag(gpath, ref);
    gpath._line.svggen = svggen;
    gpath._line._element = ref;
    
    //Crear rótulo 
    if (ref.hasAttr("label")){
      gpath._line.getMiddle = function(){
        var mx = Math.min(this.x1.baseVal.value, this.x2.baseVal.value)+Math.abs(this.x1.baseVal.value-this.x2.baseVal.value)/2,
            my = Math.min(this.y1.baseVal.value, this.y2.baseVal.value)+Math.abs(this.y1.baseVal.value-this.y2.baseVal.value)/2;
        return createPoint(this.svggen.root(), mx, my);
      };
      gpath._label = new LabelPoint(svggen, gpath, gpath._line.getMiddle(), ref);
    }
    
    //Crea un punto de movimiento para los extremos
    gpath._line.createPointDrag = function(p, x, y, method){
      if (this[p]!=null){
        this[p].destroy();
        this[p] = null;
      }
      else{
        this[p] = new Graphs.DragPoint(this._ref, this[x].baseVal.value, this[y].baseVal.value, this.svggen);
        this[p].bind(this._element, method);
      }
    }
    gpath._line.destroyPointDrag = function(p){
      if (this[p]!=null){
        this[p].destroy();
        this[p] = null;
      }
    }
    
    //Habilitar puntos drag-drop
    $(gpath._line).dblclick(function(){
      //Punto inicial y final
      this.createPointDrag("_pstart", "x1", "y1", "moveStart");
      this.createPointDrag("_pend", "x2", "y2", "moveEnd");
    });
    return gpath;
  ]]></Method>
</Class>
 
  
  
<Class id="graphspsi" arguments="">
  <Validator element-key="graphspsi" alias="*text"/>
  <Property name="defs" default="null"/>
  <Property name="shapes" default="{}"/>
  <Property name="paths" default="{}"/>
  
  <Event name="onInit" arguments=""><![CDATA[
    this.alias = this.attr("alias");
  ]]></Event>
</Class>

  
  
<Parser id="graphspsi_parser" arguments="">
  <Event name="onFinish" arguments="" trycatch="false"><![CDATA[
    this.program.state = PsiXML.ProgramState.STOP;
  ]]></Event>
</Parser>

  
  
<ComponentPsi id="graphs_component">
  <Initialize name="InitGraphs"><![CDATA[
    //Registrar elementos Psi
    PsiData.register(GraphType.Shape);
    PsiData.register(GraphType.Path);
    PsiData.register("defs");
  ]]></Initialize>
</ComponentPsi>


</ModelImplementationPsi>